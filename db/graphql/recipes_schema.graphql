# action_dispatch_uploaded_file
scalar File

# An ISO 8601-encoded datetime
scalar ISO8601DateTime

type Ingredient {
  id: Int!
  ingredientGroup: IngredientGroup
  name: String!
}

type IngredientGroup {
  id: ID!
  ingredients: [Ingredient!]
  name: String
}

type Label {
  id: Int!
  name: String!
}

type Mutation {
  recipeCreate(input: RecipeCreateInput!): RecipeCreatePayload
  recipeVote(input: RecipeVoteInput!): RecipeVotePayload
}

type Query {
  # The logged in user.
  currentUser: User

  # A recipe.
  recipe(id: ID!): Recipe

  # Categories of recipes.
  recipeCategories: [RecipeCategory!]

  # A list of the most popular recipes
  recipeFeed: [Recipe!]

  # Search for recipes using a query string
  recipeSearch(queryString: String!): [Recipe!]

  # A list of recipes
  recipes: [Recipe!]
}

type Recipe {
  calories: Int
  cookTime: Int
  datePublished: ISO8601DateTime!
  description: String
  downvoted: Boolean!
  downvotes: Int!
  id: ID!
  images: [String!]
  ingredientGroups: [IngredientGroup!]
  ingredients: [Ingredient!]
  instructions: [RecipeInstruction!]
  labels: [Label!]
  numberOfServings: Int
  prepTime: Int
  recipeCategory: String
  score: Int!
  title: String!
  totalTime: Int
  updatedAt: ISO8601DateTime!
  upvoted: Boolean!
  upvotes: Int!
  user: User!
}

type RecipeCategory {
  id: Int!
  labels: [Label!]
  name: String!
}

# Autogenerated input type of RecipeCreate
input RecipeCreateInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  recipe: RecipeInput!
}

# Autogenerated return type of RecipeCreate
type RecipeCreatePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  recipe: Recipe
}

input RecipeIngredientGroupInput {
  id: Int
  ingredients: [RecipeIngredientInput!]
  name: String
}

input RecipeIngredientInput {
  id: Int
  name: String!
}

input RecipeInput {
  calories: Int
  cookTime: Int
  description: String
  id: Int
  images: [File!]
  ingredientGroups: [RecipeIngredientGroupInput!]
  instructions: [RecipeInstructionInput!]
  labels: [RecipeLabelInput!]
  numberOfServings: Int
  prepTime: Int
  title: String!
  totalTime: Int
}

type RecipeInstruction {
  body: String!
  id: ID!
  step: Int!
}

input RecipeInstructionInput {
  body: String
  id: Int
  step: Int!
}

input RecipeLabelInput {
  id: Int
  name: String!
}

# Autogenerated input type of RecipeVote
input RecipeVoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  recipeId: ID!
  upvote: Boolean!
}

# Autogenerated return type of RecipeVote
type RecipeVotePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
}

type User {
  email: String
  firstName: String!
  lastName: String!
}